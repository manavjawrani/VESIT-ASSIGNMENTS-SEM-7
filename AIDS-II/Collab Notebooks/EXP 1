{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOHFvpDTG+WdazmKNbcCZBb"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":20,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8SUQKtWN4493","executionInfo":{"status":"ok","timestamp":1692249441234,"user_tz":-330,"elapsed":7109,"user":{"displayName":"MANAV JAWRANI","userId":"13354373443881901403"}},"outputId":"8d5ae4f1-9f4f-4249-9019-1d95a21a5e3b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: pgmpy in /usr/local/lib/python3.10/dist-packages (0.1.23)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from pgmpy) (3.1)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from pgmpy) (1.23.5)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from pgmpy) (1.10.1)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (from pgmpy) (1.2.2)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from pgmpy) (1.5.3)\n","Requirement already satisfied: pyparsing in /usr/local/lib/python3.10/dist-packages (from pgmpy) (3.1.1)\n","Requirement already satisfied: torch in /usr/local/lib/python3.10/dist-packages (from pgmpy) (2.0.1+cu118)\n","Requirement already satisfied: statsmodels in /usr/local/lib/python3.10/dist-packages (from pgmpy) (0.14.0)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from pgmpy) (4.66.1)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.10/dist-packages (from pgmpy) (1.3.2)\n","Requirement already satisfied: opt-einsum in /usr/local/lib/python3.10/dist-packages (from pgmpy) (3.3.0)\n","Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas->pgmpy) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->pgmpy) (2023.3)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->pgmpy) (3.2.0)\n","Requirement already satisfied: patsy>=0.5.2 in /usr/local/lib/python3.10/dist-packages (from statsmodels->pgmpy) (0.5.3)\n","Requirement already satisfied: packaging>=21.3 in /usr/local/lib/python3.10/dist-packages (from statsmodels->pgmpy) (23.1)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from torch->pgmpy) (3.12.2)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.10/dist-packages (from torch->pgmpy) (4.7.1)\n","Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch->pgmpy) (1.12)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch->pgmpy) (3.1.2)\n","Requirement already satisfied: triton==2.0.0 in /usr/local/lib/python3.10/dist-packages (from torch->pgmpy) (2.0.0)\n","Requirement already satisfied: cmake in /usr/local/lib/python3.10/dist-packages (from triton==2.0.0->torch->pgmpy) (3.27.2)\n","Requirement already satisfied: lit in /usr/local/lib/python3.10/dist-packages (from triton==2.0.0->torch->pgmpy) (16.0.6)\n","Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from patsy>=0.5.2->statsmodels->pgmpy) (1.16.0)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch->pgmpy) (2.1.3)\n","Requirement already satisfied: mpmath>=0.19 in /usr/local/lib/python3.10/dist-packages (from sympy->torch->pgmpy) (1.3.0)\n"]}],"source":["!pip install pgmpy"]},{"cell_type":"code","source":["from pgmpy.models import BayesianNetwork\n","from pgmpy.factors.discrete import TabularCPD\n","import networkx as nx\n","import pylab as plt"],"metadata":{"id":"VepR8jNX5K93","executionInfo":{"status":"ok","timestamp":1692249444194,"user_tz":-330,"elapsed":360,"user":{"displayName":"MANAV JAWRANI","userId":"13354373443881901403"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["# Defining Bayesian Structure\n","model = BayesianNetwork([('Guest', 'Host'), ('Price', 'Host')])\n","# Defining the CPDs:\n","cpd_guest = TabularCPD('Guest', 3, [[0.33], [0.33], [0.33]])\n","cpd_price = TabularCPD('Price', 3, [[0.33], [0.33], [0.33]])\n","cpd_host = TabularCPD('Host', 3, [[0, 0, 0, 0, 0.5, 1, 0, 1, 0.5], [0.5, 0, 1, 0, 0, 0, 1, 0, 0.5], [0.5, 1, 0, 1, 0.5, 0, 0, 0, 0]], evidence=['Guest', 'Price'], evidence_card=[3, 3])"],"metadata":{"id":"yM49lUtF5hUW","executionInfo":{"status":"ok","timestamp":1692249445939,"user_tz":-330,"elapsed":3,"user":{"displayName":"MANAV JAWRANI","userId":"13354373443881901403"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["# Associating the CPDs with the network structure.\n","model.add_cpds(cpd_guest, cpd_price, cpd_host)\n","model.check_model()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3y4X_5Io5uGW","executionInfo":{"status":"ok","timestamp":1692249448964,"user_tz":-330,"elapsed":374,"user":{"displayName":"MANAV JAWRANI","userId":"13354373443881901403"}},"outputId":"65787b26-f8f1-4ee6-e59e-0ed37545ea24"},"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["# Inferring the posterior probability\n","from pgmpy.inference import VariableElimination\n","infer = VariableElimination(model)\n","posterior_p = infer.query(['Host'], evidence={'Guest': 2, 'Price': 2})\n","print(posterior_p)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7hJzEhFB56ie","executionInfo":{"status":"ok","timestamp":1692249452021,"user_tz":-330,"elapsed":348,"user":{"displayName":"MANAV JAWRANI","userId":"13354373443881901403"}},"outputId":"269aee04-ec2b-430a-c85d-96f572d5d59c"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["+---------+-------------+\n","| Host    |   phi(Host) |\n","+=========+=============+\n","| Host(0) |      0.5000 |\n","+---------+-------------+\n","| Host(1) |      0.5000 |\n","+---------+-------------+\n","| Host(2) |      0.0000 |\n","+---------+-------------+\n"]}]},{"cell_type":"code","source":["# Inferring the posterior probability\n","from pgmpy.inference import VariableElimination\n","infer = VariableElimination(model)\n","posterior_p = infer.query(['Host'], evidence={'Guest': 1, 'Price': 2})\n","print(posterior_p)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5Rdu_YwJ6Exd","executionInfo":{"status":"ok","timestamp":1692249456187,"user_tz":-330,"elapsed":402,"user":{"displayName":"MANAV JAWRANI","userId":"13354373443881901403"}},"outputId":"1c2d8616-8352-4bad-9da8-476638d8ae95"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["+---------+-------------+\n","| Host    |   phi(Host) |\n","+=========+=============+\n","| Host(0) |      1.0000 |\n","+---------+-------------+\n","| Host(1) |      0.0000 |\n","+---------+-------------+\n","| Host(2) |      0.0000 |\n","+---------+-------------+\n"]}]},{"cell_type":"code","source":["nx.draw_circular(model, with_labels = True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":516},"id":"eRIn8cWq6O8O","executionInfo":{"status":"ok","timestamp":1692249555186,"user_tz":-330,"elapsed":3,"user":{"displayName":"MANAV JAWRANI","userId":"13354373443881901403"}},"outputId":"c4fa4258-b4c4-4c84-de7f-f04a556b0e36"},"execution_count":30,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}]}